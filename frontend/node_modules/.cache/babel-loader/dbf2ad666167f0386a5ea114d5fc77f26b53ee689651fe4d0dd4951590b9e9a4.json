{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef, useCallback } from 'react';\nimport { ACTIONS } from '../actions';\nimport socketInit from '../socket';\nimport freeice from 'freeice';\nimport { useStateWithCallback } from './useStateWithCallback';\nexport const useWebRTC = (roomId, user) => {\n  _s();\n  const [clients, setClients] = useStateWithCallback([]);\n  const audioElements = useRef({});\n  const connections = useRef({});\n  const socket = useRef(null);\n  const localMediaStream = useRef(null);\n  const clientsRef = useRef(null);\n  useEffect(() => {\n    console.log('render socketInit', 2);\n    socket.current = socketInit();\n  }, []);\n  const addNewClient = useCallback((newClient, cb) => {\n    const lookingFor = clients.find(client => client.id === newClient.id);\n    if (lookingFor === undefined) {\n      setClients(existingClients => [...existingClients, newClient], cb);\n    }\n  }, [clients, setClients]);\n  useEffect(() => {\n    console.log('render clientsRef.current = clients', 3);\n    clientsRef.current = clients;\n  }, [clients]);\n  useEffect(() => {\n    console.log('render startCapture', 4);\n    const startCapture = async () => {\n      // Start capturing local audio stream.\n      localMediaStream.current = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n    };\n    startCapture().then(() => {\n      // add user to clients list\n      console.log('render startCapture then', 5);\n      addNewClient({\n        ...user,\n        muted: true\n      }, () => {\n        console.log('render add new client me', 6);\n        const localElement = audioElements.current[user.id];\n        if (localElement) {\n          localElement.volume = 0;\n          localElement.srcObject = localMediaStream.current;\n        }\n      });\n      console.log('render before ACTIONS.JOIN', 7);\n\n      // Emit the action to join\n      socket.current.emit(ACTIONS.JOIN, {\n        roomId,\n        user\n      });\n    });\n\n    // Leaving the room\n    return () => {\n      localMediaStream.current.getTracks().forEach(track => track.stop());\n      socket.current.emit(ACTIONS.LEAVE, {\n        roomId\n      });\n    };\n  }, []);\n  // Handle new peer\n\n  useEffect(() => {\n    console.log('render handle new peer useEffect', 8);\n    const handleNewPeer = async ({\n      peerId,\n      createOffer,\n      user: remoteUser\n    }) => {\n      // If already connected then prevent connecting again\n      console.log('render inside handle new peer', 8);\n      if (peerId in connections.current) {\n        return console.warn(`You are already connected with ${peerId} (${user.name})`);\n      }\n\n      // Store it to connections\n      connections.current[peerId] = new RTCPeerConnection({\n        iceServers: freeice()\n      });\n\n      // Handle new ice candidate on this peer connection\n      connections.current[peerId].onicecandidate = event => {\n        socket.current.emit(ACTIONS.RELAY_ICE, {\n          peerId,\n          icecandidate: event.candidate\n        });\n      };\n\n      // Handle on track event on this connection\n      connections.current[peerId].ontrack = ({\n        streams: [remoteStream]\n      }) => {\n        addNewClient({\n          ...remoteUser,\n          muted: true\n        }, () => {\n          console.log('render add new client remote', 9);\n          if (audioElements.current[remoteUser.id]) {\n            audioElements.current[remoteUser.id].srcObject = remoteStream;\n          } else {\n            let settled = false;\n            const interval = setInterval(() => {\n              if (audioElements.current[remoteUser.id]) {\n                audioElements.current[remoteUser.id].srcObject = remoteStream;\n                settled = true;\n              }\n              if (settled) {\n                clearInterval(interval);\n              }\n            }, 300);\n          }\n        });\n      };\n\n      // Add connection to peer connections track\n      localMediaStream.current.getTracks().forEach(track => {\n        connections.current[peerId].addTrack(track, localMediaStream.current);\n      });\n\n      // Create an offer if required\n      if (createOffer) {\n        const offer = await connections.current[peerId].createOffer();\n\n        // Set as local description\n        await connections.current[peerId].setLocalDescription(offer);\n\n        // send offer to the server\n        socket.current.emit(ACTIONS.RELAY_SDP, {\n          peerId,\n          sessionDescription: offer\n        });\n      }\n    };\n\n    // Listen for add peer event from ws\n    socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\n    return () => {\n      socket.current.off(ACTIONS.ADD_PEER);\n    };\n  }, []);\n\n  // Handle ice candidate\n  useEffect(() => {\n    console.log('render handle ice candidate out', 10);\n    socket.current.on(ACTIONS.ICE_CANDIDATE, ({\n      peerId,\n      icecandidate\n    }) => {\n      if (icecandidate) {\n        connections.current[peerId].addIceCandidate(icecandidate);\n      }\n    });\n    return () => {\n      socket.current.off(ACTIONS.ICE_CANDIDATE);\n    };\n  }, []);\n\n  // Handle session description\n\n  useEffect(() => {\n    console.log('render set remote media', 11);\n    const setRemoteMedia = async ({\n      peerId,\n      sessionDescription: remoteSessionDescription\n    }) => {\n      connections.current[peerId].setRemoteDescription(new RTCSessionDescription(remoteSessionDescription));\n\n      // If session descrition is offer then create an answer\n      if (remoteSessionDescription.type === 'offer') {\n        const connection = connections.current[peerId];\n        const answer = await connection.createAnswer();\n        connection.setLocalDescription(answer);\n        socket.current.emit(ACTIONS.RELAY_SDP, {\n          peerId,\n          sessionDescription: answer\n        });\n      }\n    };\n    socket.current.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\n    return () => {\n      socket.current.off(ACTIONS.SESSION_DESCRIPTION);\n    };\n  }, []);\n  useEffect(() => {\n    console.log('render handle remove peer out', 12);\n    const handleRemovePeer = ({\n      peerId,\n      userId\n    }) => {\n      console.log('render inside handle remove peer out', 13);\n      // Correction: peerID to peerId\n      if (connections.current[peerId]) {\n        connections.current[peerId].close();\n      }\n      delete connections.current[peerId];\n      delete audioElements.current[peerId];\n      setClients(list => list.filter(c => c.id !== userId));\n    };\n    socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\n    return () => {\n      for (let peerId in connections.current) {\n        connections.current[peerId].close();\n        delete connections.current[peerId];\n        delete audioElements.current[peerId];\n        console.log('removing', connections.current);\n      }\n      socket.current.off(ACTIONS.REMOVE_PEER);\n    };\n  }, []);\n  useEffect(() => {\n    // handle mute and unmute\n    console.log('render inside mute useEffect', 14);\n    socket.current.on(ACTIONS.MUTE, ({\n      peerId,\n      userId\n    }) => {\n      setMute(true, userId);\n    });\n    socket.current.on(ACTIONS.UNMUTE, ({\n      peerId,\n      userId\n    }) => {\n      setMute(false, userId);\n    });\n    const setMute = (mute, userId) => {\n      const clientIdx = clientsRef.current.map(client => client.id).indexOf(userId);\n      const allConnectedClients = JSON.parse(JSON.stringify(clientsRef.current));\n      if (clientIdx > -1) {\n        allConnectedClients[clientIdx].muted = mute;\n        setClients(allConnectedClients);\n      }\n    };\n  }, []);\n  const provideRef = (instance, userId) => {\n    audioElements.current[userId] = instance;\n  };\n  const handleMute = (isMute, userId) => {\n    let settled = false;\n    if (userId === user.id) {\n      let interval = setInterval(() => {\n        if (localMediaStream.current) {\n          localMediaStream.current.getTracks()[0].enabled = !isMute;\n          if (isMute) {\n            socket.current.emit(ACTIONS.MUTE, {\n              roomId,\n              userId: user.id\n            });\n          } else {\n            socket.current.emit(ACTIONS.UNMUTE, {\n              roomId,\n              userId: user.id\n            });\n          }\n          settled = true;\n        }\n        if (settled) {\n          clearInterval(interval);\n        }\n      }, 200);\n    }\n  };\n\n  // useEffect(() => {\n  //     socket.current.emit(ACTIONS.MUTE_INFO, {\n  //         roomId,\n  //     });\n  //     console.log('hello');\n  //     socket.current.on(ACTIONS.MUTE_INFO, (muteMap) => {\n  //         console.log('mute map', muteMap);\n  //         setClients(\n  //             (list) => {\n  //                 return list.map((client) => {\n  //                     console.log('client map', client);\n  //                     return {\n  //                         ...client,\n  //                         muted: muteMap[client.id],\n  //                     };\n  //                 });\n  //             },\n  //             (prev) => {\n  //                 console.log('prev', prev);\n  //             }\n  //         );\n  //     });\n  // }, []);\n\n  return {\n    clients,\n    provideRef,\n    handleMute\n  };\n};\n_s(useWebRTC, \"0yR6M3FfJaDDfuYs6nzmF6i4Ahg=\", false, function () {\n  return [useStateWithCallback];\n});","map":{"version":3,"names":["useEffect","useState","useRef","useCallback","ACTIONS","socketInit","freeice","useStateWithCallback","useWebRTC","roomId","user","_s","clients","setClients","audioElements","connections","socket","localMediaStream","clientsRef","console","log","current","addNewClient","newClient","cb","lookingFor","find","client","id","undefined","existingClients","startCapture","navigator","mediaDevices","getUserMedia","audio","then","muted","localElement","volume","srcObject","emit","JOIN","getTracks","forEach","track","stop","LEAVE","handleNewPeer","peerId","createOffer","remoteUser","warn","name","RTCPeerConnection","iceServers","onicecandidate","event","RELAY_ICE","icecandidate","candidate","ontrack","streams","remoteStream","settled","interval","setInterval","clearInterval","addTrack","offer","setLocalDescription","RELAY_SDP","sessionDescription","on","ADD_PEER","off","ICE_CANDIDATE","addIceCandidate","setRemoteMedia","remoteSessionDescription","setRemoteDescription","RTCSessionDescription","type","connection","answer","createAnswer","SESSION_DESCRIPTION","handleRemovePeer","userId","close","list","filter","c","REMOVE_PEER","MUTE","setMute","UNMUTE","mute","clientIdx","map","indexOf","allConnectedClients","JSON","parse","stringify","provideRef","instance","handleMute","isMute","enabled"],"sources":["C:/Users/Admin/Desktop/boardroom/frontend/src/hooks/useWebRTC.js"],"sourcesContent":["import { useEffect, useState, useRef, useCallback } from 'react';\r\nimport { ACTIONS } from '../actions';\r\nimport socketInit from '../socket';\r\nimport freeice from 'freeice';\r\nimport { useStateWithCallback } from './useStateWithCallback';\r\n\r\nexport const useWebRTC = (roomId, user) => {\r\n    const [clients, setClients] = useStateWithCallback([]);\r\n    const audioElements = useRef({});\r\n    const connections = useRef({});\r\n    const socket = useRef(null);\r\n    const localMediaStream = useRef(null);\r\n    const clientsRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        console.log('render socketInit', 2);\r\n        socket.current = socketInit();\r\n    }, []);\r\n\r\n    const addNewClient = useCallback(\r\n        (newClient, cb) => {\r\n            const lookingFor = clients.find(\r\n                (client) => client.id === newClient.id\r\n            );\r\n\r\n            if (lookingFor === undefined) {\r\n                setClients(\r\n                    (existingClients) => [...existingClients, newClient],\r\n                    cb\r\n                );\r\n            }\r\n        },\r\n        [clients, setClients]\r\n    );\r\n\r\n    useEffect(() => {\r\n        console.log('render clientsRef.current = clients', 3);\r\n        clientsRef.current = clients;\r\n    }, [clients]);\r\n\r\n    useEffect(() => {\r\n        console.log('render startCapture', 4);\r\n        const startCapture = async () => {\r\n            // Start capturing local audio stream.\r\n            localMediaStream.current =\r\n                await navigator.mediaDevices.getUserMedia({\r\n                    audio: true,\r\n                });\r\n        };\r\n\r\n        startCapture().then(() => {\r\n            // add user to clients list\r\n            console.log('render startCapture then', 5);\r\n            addNewClient({ ...user, muted: true }, () => {\r\n                console.log('render add new client me', 6);\r\n                const localElement = audioElements.current[user.id];\r\n                if (localElement) {\r\n                    localElement.volume = 0;\r\n                    localElement.srcObject = localMediaStream.current;\r\n                }\r\n            });\r\n            console.log('render before ACTIONS.JOIN', 7);\r\n\r\n            // Emit the action to join\r\n            socket.current.emit(ACTIONS.JOIN, {\r\n                roomId,\r\n                user,\r\n            });\r\n        });\r\n\r\n        // Leaving the room\r\n        return () => {\r\n            localMediaStream.current\r\n                .getTracks()\r\n                .forEach((track) => track.stop());\r\n            socket.current.emit(ACTIONS.LEAVE, { roomId });\r\n        };\r\n    }, []);\r\n    // Handle new peer\r\n\r\n    useEffect(() => {\r\n        console.log('render handle new peer useEffect', 8);\r\n        const handleNewPeer = async ({\r\n            peerId,\r\n            createOffer,\r\n            user: remoteUser,\r\n        }) => {\r\n            // If already connected then prevent connecting again\r\n            console.log('render inside handle new peer', 8);\r\n            if (peerId in connections.current) {\r\n                return console.warn(\r\n                    `You are already connected with ${peerId} (${user.name})`\r\n                );\r\n            }\r\n\r\n            // Store it to connections\r\n            connections.current[peerId] = new RTCPeerConnection({\r\n                iceServers: freeice(),\r\n            });\r\n\r\n            // Handle new ice candidate on this peer connection\r\n            connections.current[peerId].onicecandidate = (event) => {\r\n                socket.current.emit(ACTIONS.RELAY_ICE, {\r\n                    peerId,\r\n                    icecandidate: event.candidate,\r\n                });\r\n            };\r\n\r\n            // Handle on track event on this connection\r\n            connections.current[peerId].ontrack = ({\r\n                streams: [remoteStream],\r\n            }) => {\r\n                addNewClient({ ...remoteUser, muted: true }, () => {\r\n                    console.log('render add new client remote', 9);\r\n                    if (audioElements.current[remoteUser.id]) {\r\n                        audioElements.current[remoteUser.id].srcObject =\r\n                            remoteStream;\r\n                    } else {\r\n                        let settled = false;\r\n                        const interval = setInterval(() => {\r\n                            if (audioElements.current[remoteUser.id]) {\r\n                                audioElements.current[remoteUser.id].srcObject =\r\n                                    remoteStream;\r\n                                settled = true;\r\n                            }\r\n\r\n                            if (settled) {\r\n                                clearInterval(interval);\r\n                            }\r\n                        }, 300);\r\n                    }\r\n                });\r\n            };\r\n\r\n            // Add connection to peer connections track\r\n            localMediaStream.current.getTracks().forEach((track) => {\r\n                connections.current[peerId].addTrack(\r\n                    track,\r\n                    localMediaStream.current\r\n                );\r\n            });\r\n\r\n            // Create an offer if required\r\n            if (createOffer) {\r\n                const offer = await connections.current[peerId].createOffer();\r\n\r\n                // Set as local description\r\n                await connections.current[peerId].setLocalDescription(offer);\r\n\r\n                // send offer to the server\r\n                socket.current.emit(ACTIONS.RELAY_SDP, {\r\n                    peerId,\r\n                    sessionDescription: offer,\r\n                });\r\n            }\r\n        };\r\n\r\n        // Listen for add peer event from ws\r\n        socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\r\n        return () => {\r\n            socket.current.off(ACTIONS.ADD_PEER);\r\n        };\r\n    }, []);\r\n\r\n    // Handle ice candidate\r\n    useEffect(() => {\r\n        console.log('render handle ice candidate out', 10);\r\n        socket.current.on(ACTIONS.ICE_CANDIDATE, ({ peerId, icecandidate }) => {\r\n            if (icecandidate) {\r\n                connections.current[peerId].addIceCandidate(icecandidate);\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            socket.current.off(ACTIONS.ICE_CANDIDATE);\r\n        };\r\n    }, []);\r\n\r\n    // Handle session description\r\n\r\n    useEffect(() => {\r\n        console.log('render set remote media', 11);\r\n        const setRemoteMedia = async ({\r\n            peerId,\r\n            sessionDescription: remoteSessionDescription,\r\n        }) => {\r\n            connections.current[peerId].setRemoteDescription(\r\n                new RTCSessionDescription(remoteSessionDescription)\r\n            );\r\n\r\n            // If session descrition is offer then create an answer\r\n            if (remoteSessionDescription.type === 'offer') {\r\n                const connection = connections.current[peerId];\r\n\r\n                const answer = await connection.createAnswer();\r\n                connection.setLocalDescription(answer);\r\n\r\n                socket.current.emit(ACTIONS.RELAY_SDP, {\r\n                    peerId,\r\n                    sessionDescription: answer,\r\n                });\r\n            }\r\n        };\r\n\r\n        socket.current.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\r\n        return () => {\r\n            socket.current.off(ACTIONS.SESSION_DESCRIPTION);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log('render handle remove peer out', 12);\r\n        const handleRemovePeer = ({ peerId, userId }) => {\r\n            console.log('render inside handle remove peer out', 13);\r\n            // Correction: peerID to peerId\r\n            if (connections.current[peerId]) {\r\n                connections.current[peerId].close();\r\n            }\r\n\r\n            delete connections.current[peerId];\r\n            delete audioElements.current[peerId];\r\n            setClients((list) => list.filter((c) => c.id !== userId));\r\n        };\r\n\r\n        socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\r\n\r\n        return () => {\r\n            for (let peerId in connections.current) {\r\n                connections.current[peerId].close();\r\n                delete connections.current[peerId];\r\n                delete audioElements.current[peerId];\r\n                console.log('removing', connections.current);\r\n            }\r\n            socket.current.off(ACTIONS.REMOVE_PEER);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // handle mute and unmute\r\n        console.log('render inside mute useEffect', 14);\r\n        socket.current.on(ACTIONS.MUTE, ({ peerId, userId }) => {\r\n            setMute(true, userId);\r\n        });\r\n\r\n        socket.current.on(ACTIONS.UNMUTE, ({ peerId, userId }) => {\r\n            setMute(false, userId);\r\n        });\r\n\r\n        const setMute = (mute, userId) => {\r\n            const clientIdx = clientsRef.current\r\n                .map((client) => client.id)\r\n                .indexOf(userId);\r\n            const allConnectedClients = JSON.parse(\r\n                JSON.stringify(clientsRef.current)\r\n            );\r\n            if (clientIdx > -1) {\r\n                allConnectedClients[clientIdx].muted = mute;\r\n                setClients(allConnectedClients);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const provideRef = (instance, userId) => {\r\n        audioElements.current[userId] = instance;\r\n    };\r\n\r\n    const handleMute = (isMute, userId) => {\r\n        let settled = false;\r\n\r\n        if (userId === user.id) {\r\n            let interval = setInterval(() => {\r\n                if (localMediaStream.current) {\r\n                    localMediaStream.current.getTracks()[0].enabled = !isMute;\r\n                    if (isMute) {\r\n                        socket.current.emit(ACTIONS.MUTE, {\r\n                            roomId,\r\n                            userId: user.id,\r\n                        });\r\n                    } else {\r\n                        socket.current.emit(ACTIONS.UNMUTE, {\r\n                            roomId,\r\n                            userId: user.id,\r\n                        });\r\n                    }\r\n                    settled = true;\r\n                }\r\n                if (settled) {\r\n                    clearInterval(interval);\r\n                }\r\n            }, 200);\r\n        }\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     socket.current.emit(ACTIONS.MUTE_INFO, {\r\n    //         roomId,\r\n    //     });\r\n    //     console.log('hello');\r\n    //     socket.current.on(ACTIONS.MUTE_INFO, (muteMap) => {\r\n    //         console.log('mute map', muteMap);\r\n    //         setClients(\r\n    //             (list) => {\r\n    //                 return list.map((client) => {\r\n    //                     console.log('client map', client);\r\n    //                     return {\r\n    //                         ...client,\r\n    //                         muted: muteMap[client.id],\r\n    //                     };\r\n    //                 });\r\n    //             },\r\n    //             (prev) => {\r\n    //                 console.log('prev', prev);\r\n    //             }\r\n    //         );\r\n    //     });\r\n    // }, []);\r\n\r\n    return {\r\n        clients,\r\n        provideRef,\r\n        handleMute,\r\n    };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}