{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef, useEffect, useCallback } from 'react';\nimport { useStateWithCallback } from './useStateWithCallback';\nimport { socketInit } from '../socket/index';\nimport { ACTIONS } from '../actions';\nimport freeice from 'freeice';\nexport const useWebRTC = (roomId, user) => {\n  _s();\n  const [clients, setClients] = useStateWithCallback([]);\n  const audioElements = useRef({});\n  const connections = useRef({});\n  const localMediaStream = useRef(null);\n  const socket = useRef(null);\n  useEffect(() => {\n    socket.current = socketInit();\n  }, []);\n  const addNewClient = useCallback((newClient, cb) => {\n    const lookingFor = clients.find(client => client.id === newClient.id);\n    if (lookingFor === undefined) {\n      setClients(existingClients => [...existingClients, newClient], cb);\n    }\n  }, [clients, setClients]);\n\n  //capture media\n  useEffect(() => {\n    const startCapture = async () => {\n      localMediaStream.current = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n    };\n    startCapture().then(stream => {\n      addNewClient(user, () => {\n        const localElement = audioElements.current[user.id];\n        if (localElement) {\n          localElement.volume = 0;\n          localElement.srcObject = localMediaStream.current;\n        }\n\n        // socket emit JOIN socket.io\n        socket.current.emit(ACTIONS.JOIN, {});\n      });\n    });\n    return () => {\n      //leaving the room\n      if (localMediaStream.current) {\n        localMediaStream.current.getTracks().forEach(track => track.stop());\n        socket.current.emit(ACTIONS.LEAVE, {\n          roomId\n        });\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const handleNewPeer = async ({\n      peerId,\n      createOffer,\n      user: remoteUser\n    }) => {\n      //if already connected give warning\n      if (peerId in connections.current) {\n        return console.warn(`Already connected to peer, ${peerId}, (${user.name})`);\n      }\n      ;\n      connections.current[peerId] = new RTCPeerConnection({\n        iceServers: freeice()\n      });\n\n      //Handle new ice candidates\n      connections.current[peerId].onicecandidate = event => {\n        socket.current.emit(ACTIONS.RELAY_ICE, {\n          peerId,\n          icecandidate: event.candidate\n        });\n      };\n\n      //handle on track on this connection\n\n      connections.current[peerId].ontrack = ({\n        streams: [remoteStream]\n      }) => {\n        addNewClient(remoteUser, () => {\n          if (audioElements.current[remoteUser.id]) {\n            audioElements.current[remoteUser.id].srcObject = remoteStream;\n          } else {\n            let settled = false;\n            const interval = setInterval(() => {\n              if (audioElements.current[remoteUser.id]) {\n                audioElements.current[remoteUser.id].srcObject = remoteStream;\n                settled = true;\n              }\n              if (settled) {\n                clearInterval(interval);\n              }\n            }, 1000);\n          }\n        });\n      };\n      //add local track to remote connections\n      localMediaStream.current.getTracks().forEach(track => {\n        connections.current[peerId].addTrack(track, localMediaStream.current);\n      });\n\n      //create offer \n      if (createOffer) {\n        const offer = await connections.current[peerId].createOffer();\n        await connections.current[peerId].setLocalDescription(offer);\n\n        //send offer to another client\n        socket.current.emit(ACTIONS.RELAY_SDP, {\n          peerId,\n          sessionDescription: offer\n        });\n      }\n    };\n    socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\n    return () => {\n      socket.current.off(ACTIONS.ADD_PEER);\n    };\n  }, []);\n\n  //handle ice candidate\n  useEffect(() => {\n    socket.current.on(ACTIONS.ICE_CANDIDATE, ({\n      peerId,\n      icecandidate\n    }) => {\n      if (icecandidate) {\n        connections.current[peerId].addIceCandidate(icecandidate);\n      }\n    });\n    return () => {\n      socket.current.off(ACTIONS.ICE_CANDIDATE);\n    };\n  }, []);\n\n  //handle SDP\n  useEffect(() => {\n    const handleRemoteSdp = async ({\n      peerId,\n      sessionDescription: remoteSessionDescription\n    }) => {\n      connections.current[peerId].setRemoteDescription(new RTCSessionDescription(remoteSessionDescription));\n\n      //if offer, create answer\n      if (remoteSessionDescription.type === 'offer') {\n        const connection = connections.current[peerId];\n        const answer = await connection.createAnswer();\n        connection.setLocalDescription(answer);\n        socket.current.emit(ACTIONS.RELAY_SDP, {\n          peerId,\n          sessionDescription: answer\n        });\n      }\n    };\n    socket.current.on(ACTIONS.SESSION_DESCRIPTION, handleRemoteSdp);\n    return () => {\n      socket.current.off(ACTIONS.SESSION_DESCRIPTION);\n    };\n  }, []);\n\n  //handle remove peer\n  useEffect(() => {\n    const handleRemovePeer = async ({\n      peerId,\n      userId\n    }) => {\n      if (connections.current[peerId]) {\n        connections.current[peerId].close();\n      }\n      delete connections.current[peerId];\n      delete audioElements.current[userId];\n      setClients(list => list.filter(client => client.id !== userId));\n    };\n    socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\n  }, []);\n  const provideRef = (instance, userId) => {\n    audioElements.current[userId] = instance;\n  };\n  return {\n    clients,\n    provideRef\n  };\n};\n_s(useWebRTC, \"ksM9rSuLqu6dP4rwJKw4UMLpEwY=\", false, function () {\n  return [useStateWithCallback];\n});","map":{"version":3,"names":["useState","useRef","useEffect","useCallback","useStateWithCallback","socketInit","ACTIONS","freeice","useWebRTC","roomId","user","_s","clients","setClients","audioElements","connections","localMediaStream","socket","current","addNewClient","newClient","cb","lookingFor","find","client","id","undefined","existingClients","startCapture","navigator","mediaDevices","getUserMedia","audio","then","stream","localElement","volume","srcObject","emit","JOIN","getTracks","forEach","track","stop","LEAVE","handleNewPeer","peerId","createOffer","remoteUser","console","warn","name","RTCPeerConnection","iceServers","onicecandidate","event","RELAY_ICE","icecandidate","candidate","ontrack","streams","remoteStream","settled","interval","setInterval","clearInterval","addTrack","offer","setLocalDescription","RELAY_SDP","sessionDescription","on","ADD_PEER","off","ICE_CANDIDATE","addIceCandidate","handleRemoteSdp","remoteSessionDescription","setRemoteDescription","RTCSessionDescription","type","connection","answer","createAnswer","SESSION_DESCRIPTION","handleRemovePeer","userId","close","list","filter","REMOVE_PEER","provideRef","instance"],"sources":["C:/Users/Admin/Desktop/boardroom/frontend/src/hooks/useWebRTC.js"],"sourcesContent":["import { useState, useRef, useEffect, useCallback } from 'react';\r\nimport { useStateWithCallback } from './useStateWithCallback';\r\nimport {socketInit} from '../socket/index';\r\nimport { ACTIONS } from '../actions';\r\nimport freeice from 'freeice';\r\n\r\n\r\nexport const useWebRTC = (roomId, user) => {\r\n    const [clients, setClients]= useStateWithCallback([]);\r\n    const audioElements = useRef({});\r\n    const connections = useRef({});\r\n    const localMediaStream = useRef(null);\r\n    const socket = useRef(null);\r\n    \r\n    useEffect(() =>{\r\n        socket.current = socketInit();\r\n    },[])\r\n\r\n    const addNewClient = useCallback(\r\n        (newClient, cb) => {\r\n            const lookingFor = clients.find((client) => client.id === newClient.id);\r\n            if (lookingFor === undefined){\r\n                setClients((existingClients) => [...existingClients, newClient], \r\n                cb\r\n            );}\r\n\r\n        },\r\n        [clients, setClients]\r\n    );\r\n\r\n    //capture media\r\n    useEffect(() => {   \r\n        const startCapture = async() => {\r\n            localMediaStream.current = \r\n            await navigator.mediaDevices.getUserMedia({\r\n                audio: true\r\n            });\r\n        };\r\n        startCapture().then((stream) => {\r\n            addNewClient(user, ()=>{\r\n                const localElement = audioElements.current[user.id];\r\n                if (localElement){\r\n                    localElement.volume = 0;\r\n                    localElement.srcObject = localMediaStream.current;\r\n                }\r\n\r\n                // socket emit JOIN socket.io\r\n                socket.current.emit(ACTIONS.JOIN, {});\r\n\r\n            })\r\n        })\r\n\r\n        return () => {\r\n            //leaving the room\r\n            if (localMediaStream.current){\r\n                localMediaStream.current.getTracks().forEach((track) => track.stop());\r\n                socket.current.emit(ACTIONS.LEAVE,{roomId});\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() =>{\r\n\r\n        const handleNewPeer = async ({peerId, createOffer, user: remoteUser}) => {\r\n            //if already connected give warning\r\n            if (peerId in connections.current){\r\n                return console.warn(`Already connected to peer, ${peerId}, (${user.name})`\r\n            );\r\n                \r\n            };\r\n            connections.current [peerId] = new RTCPeerConnection({\r\n                iceServers: freeice()\r\n            });\r\n\r\n            //Handle new ice candidates\r\n            connections.current[peerId].onicecandidate = (event) => {\r\n                socket.current.emit(ACTIONS.RELAY_ICE, {\r\n                    peerId,\r\n                    icecandidate: event.candidate,\r\n                })\r\n            };\r\n\r\n            //handle on track on this connection\r\n\r\n            connections.current[peerId].ontrack =({\r\n                streams: [remoteStream]\r\n            }) => {\r\n                addNewClient(remoteUser, () => {\r\n                    if (audioElements.current[remoteUser.id]){\r\n                        audioElements.current[remoteUser.id].srcObject = remoteStream;\r\n                    }else{\r\n                        let settled = false;\r\n                        const interval = setInterval(() =>{\r\n                            if (audioElements.current[remoteUser.id]){\r\n                                audioElements.current[remoteUser.id].srcObject = remoteStream;\r\n                                settled = true;\r\n                            }\r\n                            if (settled) {\r\n                                clearInterval(interval);\r\n                            }\r\n                            \r\n                        },1000)\r\n                    }\r\n                })\r\n            }\r\n            //add local track to remote connections\r\n            localMediaStream.current.getTracks().forEach((track) => {\r\n                connections.current[peerId].addTrack(\r\n                    track,\r\n                    localMediaStream.current\r\n                );\r\n            });\r\n            \r\n            //create offer \r\n            if (createOffer) {\r\n                const offer = await connections.current[peerId].createOffer();\r\n                await connections.current[peerId].setLocalDescription(offer);\r\n\r\n                //send offer to another client\r\n                socket.current.emit(ACTIONS.RELAY_SDP,{\r\n                    peerId,\r\n                    sessionDescription: offer,\r\n                })\r\n            }\r\n        };\r\n\r\n        socket.current.on(ACTIONS.ADD_PEER,handleNewPeer)\r\n\r\n        return () => {\r\n            socket.current.off(ACTIONS.ADD_PEER);\r\n        }\r\n    },[])\r\n\r\n    //handle ice candidate\r\n    useEffect(() => {\r\n        socket.current.on(ACTIONS.ICE_CANDIDATE,({peerId, icecandidate}) => {\r\n            if (icecandidate){\r\n                connections.current[peerId].addIceCandidate(icecandidate);\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            socket.current.off(ACTIONS.ICE_CANDIDATE);\r\n        }\r\n\r\n    },[])\r\n\r\n    //handle SDP\r\n    useEffect (() =>{\r\n        const handleRemoteSdp = async ({peerId, sessionDescription: remoteSessionDescription}) =>{\r\n            connections.current[peerId].setRemoteDescription(\r\n                new RTCSessionDescription(remoteSessionDescription)\r\n            );\r\n\r\n            //if offer, create answer\r\n            if (remoteSessionDescription.type === 'offer'){\r\n                const connection = connections.current[peerId];\r\n                const answer = await connection.createAnswer();\r\n\r\n                connection.setLocalDescription(answer);\r\n\r\n                socket.current.emit(ACTIONS.RELAY_SDP,{\r\n                    peerId,\r\n                    sessionDescription: answer,\r\n                });\r\n            }\r\n        };\r\n        socket.current.on(ACTIONS.SESSION_DESCRIPTION,handleRemoteSdp);\r\n\r\n        return () => {\r\n            socket.current.off(ACTIONS.SESSION_DESCRIPTION);\r\n        };\r\n\r\n    },[]);\r\n\r\n    //handle remove peer\r\n    useEffect (() =>{\r\n        const handleRemovePeer = async ({peerId, userId}) => {\r\n            if (connections.current[peerId]) {\r\n                connections.current[peerId].close();\r\n            }\r\n\r\n            delete connections.current[peerId];\r\n            delete audioElements.current[userId];\r\n            setClients (list => list.filter(client => client.id !==userId));\r\n        };\r\n        socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\r\n    },[]);\r\n\r\n    const provideRef = (instance, userId) => {\r\n        audioElements.current[userId] = instance;\r\n\r\n};\r\n    return {clients, provideRef};\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}