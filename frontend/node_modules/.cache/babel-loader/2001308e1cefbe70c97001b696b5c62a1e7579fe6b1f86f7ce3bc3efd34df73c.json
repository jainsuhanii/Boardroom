{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef, useCallback } from 'react';\nimport { ACTIONS } from '../actions';\nimport socketInit from '../socket';\nimport freeice from 'freeice';\nimport { useStateWithCallback } from './useStateWithCallback';\nexport const useWebRTC = (roomId, user) => {\n  _s();\n  const [clients, setClients] = useStateWithCallback([]);\n  const audioElements = useRef({});\n  const connections = useRef({});\n  const socket = useRef(null);\n  const localMediaStream = useRef(null);\n  const clientsRef = useRef(null);\n  const addNewClient = useCallback((newClient, cb) => {\n    const lookingFor = clients.find(client => client.id === newClient.id);\n    if (lookingFor === undefined) {\n      setClients(existingClients => [...existingClients, newClient], cb);\n    }\n  }, [clients, setClients]);\n  useEffect(() => {\n    clientsRef.current = clients;\n  }, [clients]);\n  useEffect(() => {\n    const initChat = async () => {\n      socket.current = socketInit();\n      await captureMedia();\n      addNewClient({\n        ...user,\n        muted: true\n      }, () => {\n        const localElement = audioElements.current[user.id];\n        if (localElement) {\n          localElement.volume = 0;\n          localElement.srcObject = localMediaStream.current;\n        }\n      });\n      socket.current.on(ACTIONS.MUTE_INFO, ({\n        userId,\n        isMute\n      }) => {\n        handleSetMute(isMute, userId);\n      });\n      socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\n      socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\n      socket.current.on(ACTIONS.ICE_CANDIDATE, handleIceCandidate);\n      socket.current.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\n      socket.current.on(ACTIONS.MUTE, ({\n        peerId,\n        userId\n      }) => {\n        handleSetMute(true, userId);\n      });\n      socket.current.on(ACTIONS.UNMUTE, ({\n        peerId,\n        userId\n      }) => {\n        handleSetMute(false, userId);\n      });\n      socket.current.emit(ACTIONS.JOIN, {\n        roomId,\n        user\n      });\n      async function captureMedia() {\n        // Start capturing local audio stream.\n        localMediaStream.current = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n      }\n      async function handleNewPeer({\n        peerId,\n        createOffer,\n        user: remoteUser\n      }) {\n        if (peerId in connections.current) {\n          return console.warn(`You are already connected with ${peerId} (${user.name})`);\n        }\n\n        // Store it to connections\n        connections.current[peerId] = new RTCPeerConnection({\n          iceServers: freeice()\n        });\n\n        // Handle new ice candidate on this peer connection\n        connections.current[peerId].onicecandidate = event => {\n          socket.current.emit(ACTIONS.RELAY_ICE, {\n            peerId,\n            icecandidate: event.candidate\n          });\n        };\n\n        // Handle on track event on this connection\n        connections.current[peerId].ontrack = ({\n          streams: [remoteStream]\n        }) => {\n          addNewClient({\n            ...remoteUser,\n            muted: true\n          }, () => {\n            // get current users mute info\n            const currentUser = clientsRef.current.find(client => client.id === user.id);\n            if (currentUser) {\n              socket.current.emit(ACTIONS.MUTE_INFO, {\n                userId: user.id,\n                roomId,\n                isMute: currentUser.muted\n              });\n            }\n            if (audioElements.current[remoteUser.id]) {\n              audioElements.current[remoteUser.id].srcObject = remoteStream;\n            } else {\n              let settled = false;\n              const interval = setInterval(() => {\n                if (audioElements.current[remoteUser.id]) {\n                  audioElements.current[remoteUser.id].srcObject = remoteStream;\n                  settled = true;\n                }\n                if (settled) {\n                  clearInterval(interval);\n                }\n              }, 300);\n            }\n          });\n        };\n\n        // Add connection to peer connections track\n        localMediaStream.current.getTracks().forEach(track => {\n          connections.current[peerId].addTrack(track, localMediaStream.current);\n        });\n\n        // Create an offer if required\n        if (createOffer) {\n          const offer = await connections.current[peerId].createOffer();\n\n          // Set as local description\n          await connections.current[peerId].setLocalDescription(offer);\n\n          // send offer to the server\n          socket.current.emit(ACTIONS.RELAY_SDP, {\n            peerId,\n            sessionDescription: offer\n          });\n        }\n      }\n      async function handleRemovePeer({\n        peerId,\n        userId\n      }) {\n        // Correction: peerID to peerId\n        if (connections.current[peerId]) {\n          connections.current[peerId].close();\n        }\n        delete connections.current[peerId];\n        delete audioElements.current[peerId];\n        setClients(list => list.filter(c => c.id !== userId));\n      }\n      async function handleIceCandidate({\n        peerId,\n        icecandidate\n      }) {\n        if (icecandidate) {\n          connections.current[peerId].addIceCandidate(icecandidate);\n        }\n      }\n      async function setRemoteMedia({\n        peerId,\n        sessionDescription: remoteSessionDescription\n      }) {\n        connections.current[peerId].setRemoteDescription(new RTCSessionDescription(remoteSessionDescription));\n\n        // If session descrition is offer then create an answer\n        if (remoteSessionDescription.type === 'offer') {\n          const connection = connections.current[peerId];\n          const answer = await connection.createAnswer();\n          connection.setLocalDescription(answer);\n          socket.current.emit(ACTIONS.RELAY_SDP, {\n            peerId,\n            sessionDescription: answer\n          });\n        }\n      }\n      async function handleSetMute(mute, userId) {\n        const clientIdx = clientsRef.current.map(client => client.id).indexOf(userId);\n        const allConnectedClients = JSON.parse(JSON.stringify(clientsRef.current));\n        if (clientIdx > -1) {\n          allConnectedClients[clientIdx].muted = mute;\n          setClients(allConnectedClients);\n        }\n      }\n    };\n    initChat();\n    return () => {\n      if (localMediaStream.current) {\n        localMediaStream.current.getTracks().forEach(track => {\n          track.stop();\n        });\n        socket.current.emit(ACTIONS.LEAVE, {\n          roomId\n        });\n      }\n      for (let peerId in connections.current) {\n        connections.current[peerId].close();\n        delete connections.current[peerId];\n        delete audioElements.current[peerId];\n      }\n      socket.current.off(ACTIONS.ADD_PEER);\n      socket.current.off(ACTIONS.REMOVE_PEER);\n      socket.current.off(ACTIONS.ICE_CANDIDATE);\n      socket.current.off(ACTIONS.SESSION_DESCRIPTION);\n      socket.current.off(ACTIONS.MUTE);\n      socket.current.off(ACTIONS.UNMUTE);\n    };\n  }, []);\n  const provideRef = (instance, userId) => {\n    audioElements.current[userId] = instance;\n  };\n  const handleMute = (isMute, userId) => {\n    let settled = false;\n    if (userId === user.id) {\n      let interval = setInterval(() => {\n        if (localMediaStream.current) {\n          localMediaStream.current.getTracks()[0].enabled = !isMute;\n          if (isMute) {\n            socket.current.emit(ACTIONS.MUTE, {\n              roomId,\n              userId: user.id\n            });\n          } else {\n            socket.current.emit(ACTIONS.UNMUTE, {\n              roomId,\n              userId: user.id\n            });\n          }\n          settled = true;\n        }\n        if (settled) {\n          clearInterval(interval);\n        }\n      }, 200);\n    }\n  };\n  return {\n    clients,\n    provideRef,\n    handleMute\n  };\n};\n_s(useWebRTC, \"3TvHJpyJNNvMGFf9ptUfUUM9qII=\", false, function () {\n  return [useStateWithCallback];\n});","map":{"version":3,"names":["useEffect","useState","useRef","useCallback","ACTIONS","socketInit","freeice","useStateWithCallback","useWebRTC","roomId","user","_s","clients","setClients","audioElements","connections","socket","localMediaStream","clientsRef","addNewClient","newClient","cb","lookingFor","find","client","id","undefined","existingClients","current","initChat","captureMedia","muted","localElement","volume","srcObject","on","MUTE_INFO","userId","isMute","handleSetMute","ADD_PEER","handleNewPeer","REMOVE_PEER","handleRemovePeer","ICE_CANDIDATE","handleIceCandidate","SESSION_DESCRIPTION","setRemoteMedia","MUTE","peerId","UNMUTE","emit","JOIN","navigator","mediaDevices","getUserMedia","audio","createOffer","remoteUser","console","warn","name","RTCPeerConnection","iceServers","onicecandidate","event","RELAY_ICE","icecandidate","candidate","ontrack","streams","remoteStream","currentUser","settled","interval","setInterval","clearInterval","getTracks","forEach","track","addTrack","offer","setLocalDescription","RELAY_SDP","sessionDescription","close","list","filter","c","addIceCandidate","remoteSessionDescription","setRemoteDescription","RTCSessionDescription","type","connection","answer","createAnswer","mute","clientIdx","map","indexOf","allConnectedClients","JSON","parse","stringify","stop","LEAVE","off","provideRef","instance","handleMute","enabled"],"sources":["C:/Users/Admin/Desktop/boardroom/frontend/src/hooks/useWebRTC.js"],"sourcesContent":["import { useEffect, useState, useRef, useCallback } from 'react';\r\nimport { ACTIONS } from '../actions';\r\nimport socketInit from '../socket';\r\nimport freeice from 'freeice';\r\nimport { useStateWithCallback } from './useStateWithCallback';\r\n\r\nexport const useWebRTC = (roomId, user) => {\r\n    const [clients, setClients] = useStateWithCallback([]);\r\n    const audioElements = useRef({});\r\n    const connections = useRef({});\r\n    const socket = useRef(null);\r\n    const localMediaStream = useRef(null);\r\n    const clientsRef = useRef(null);\r\n\r\n    const addNewClient = useCallback(\r\n        (newClient, cb) => {\r\n            const lookingFor = clients.find(\r\n                (client) => client.id === newClient.id\r\n            );\r\n\r\n            if (lookingFor === undefined) {\r\n                setClients(\r\n                    (existingClients) => [...existingClients, newClient],\r\n                    cb\r\n                );\r\n            }\r\n        },\r\n        [clients, setClients]\r\n    );\r\n\r\n    useEffect(() => {\r\n        clientsRef.current = clients;\r\n    }, [clients]);\r\n\r\n    useEffect(() => {\r\n        const initChat = async () => {\r\n            socket.current = socketInit();\r\n            await captureMedia();\r\n            addNewClient({ ...user, muted: true }, () => {\r\n                const localElement = audioElements.current[user.id];\r\n                if (localElement) {\r\n                    localElement.volume = 0;\r\n                    localElement.srcObject = localMediaStream.current;\r\n                }\r\n            });\r\n            socket.current.on(ACTIONS.MUTE_INFO, ({ userId, isMute }) => {\r\n                handleSetMute(isMute, userId);\r\n            });\r\n\r\n            socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\r\n            socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\r\n            socket.current.on(ACTIONS.ICE_CANDIDATE, handleIceCandidate);\r\n            socket.current.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\r\n            socket.current.on(ACTIONS.MUTE, ({ peerId, userId }) => {\r\n                handleSetMute(true, userId);\r\n            });\r\n            socket.current.on(ACTIONS.UNMUTE, ({ peerId, userId }) => {\r\n                handleSetMute(false, userId);\r\n            });\r\n            socket.current.emit(ACTIONS.JOIN, {\r\n                roomId,\r\n                user,\r\n            });\r\n\r\n            async function captureMedia() {\r\n                // Start capturing local audio stream.\r\n                localMediaStream.current =\r\n                    await navigator.mediaDevices.getUserMedia({\r\n                        audio: true,\r\n                    });\r\n            }\r\n            async function handleNewPeer({\r\n                peerId,\r\n                createOffer,\r\n                user: remoteUser,\r\n            }) {\r\n                if (peerId in connections.current) {\r\n                    return console.warn(\r\n                        `You are already connected with ${peerId} (${user.name})`\r\n                    );\r\n                }\r\n\r\n                // Store it to connections\r\n                connections.current[peerId] = new RTCPeerConnection({\r\n                    iceServers: freeice(),\r\n                });\r\n\r\n                // Handle new ice candidate on this peer connection\r\n                connections.current[peerId].onicecandidate = (event) => {\r\n                    socket.current.emit(ACTIONS.RELAY_ICE, {\r\n                        peerId,\r\n                        icecandidate: event.candidate,\r\n                    });\r\n                };\r\n\r\n                // Handle on track event on this connection\r\n                connections.current[peerId].ontrack = ({\r\n                    streams: [remoteStream],\r\n                }) => {\r\n                    addNewClient({ ...remoteUser, muted: true }, () => {\r\n                        // get current users mute info\r\n                        const currentUser = clientsRef.current.find(\r\n                            (client) => client.id === user.id\r\n                        );\r\n                        if (currentUser) {\r\n                            socket.current.emit(ACTIONS.MUTE_INFO, {\r\n                                userId: user.id,\r\n                                roomId,\r\n                                isMute: currentUser.muted,\r\n                            });\r\n                        }\r\n                        if (audioElements.current[remoteUser.id]) {\r\n                            audioElements.current[remoteUser.id].srcObject =\r\n                                remoteStream;\r\n                        } else {\r\n                            let settled = false;\r\n                            const interval = setInterval(() => {\r\n                                if (audioElements.current[remoteUser.id]) {\r\n                                    audioElements.current[\r\n                                        remoteUser.id\r\n                                    ].srcObject = remoteStream;\r\n                                    settled = true;\r\n                                }\r\n\r\n                                if (settled) {\r\n                                    clearInterval(interval);\r\n                                }\r\n                            }, 300);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                // Add connection to peer connections track\r\n                localMediaStream.current.getTracks().forEach((track) => {\r\n                    connections.current[peerId].addTrack(\r\n                        track,\r\n                        localMediaStream.current\r\n                    );\r\n                });\r\n\r\n                // Create an offer if required\r\n                if (createOffer) {\r\n                    const offer = await connections.current[peerId].createOffer();\r\n\r\n                    // Set as local description\r\n                    await connections.current[peerId].setLocalDescription(offer);\r\n\r\n                    // send offer to the server\r\n                    socket.current.emit(ACTIONS.RELAY_SDP, {\r\n                        peerId,\r\n                        sessionDescription: offer,\r\n                    });\r\n                }\r\n            }\r\n            async function handleRemovePeer({ peerId, userId }) {\r\n                // Correction: peerID to peerId\r\n                if (connections.current[peerId]) {\r\n                    connections.current[peerId].close();\r\n                }\r\n\r\n                delete connections.current[peerId];\r\n                delete audioElements.current[peerId];\r\n                setClients((list) => list.filter((c) => c.id !== userId));\r\n            }\r\n            async function handleIceCandidate({ peerId, icecandidate }) {\r\n                if (icecandidate) {\r\n                    connections.current[peerId].addIceCandidate(icecandidate);\r\n                }\r\n            }\r\n            async function setRemoteMedia({\r\n                peerId,\r\n                sessionDescription: remoteSessionDescription,\r\n            }) {\r\n                connections.current[peerId].setRemoteDescription(\r\n                    new RTCSessionDescription(remoteSessionDescription)\r\n                );\r\n\r\n                // If session descrition is offer then create an answer\r\n                if (remoteSessionDescription.type === 'offer') {\r\n                    const connection = connections.current[peerId];\r\n\r\n                    const answer = await connection.createAnswer();\r\n                    connection.setLocalDescription(answer);\r\n\r\n                    socket.current.emit(ACTIONS.RELAY_SDP, {\r\n                        peerId,\r\n                        sessionDescription: answer,\r\n                    });\r\n                }\r\n            }\r\n            async function handleSetMute(mute, userId) {\r\n                const clientIdx = clientsRef.current\r\n                    .map((client) => client.id)\r\n                    .indexOf(userId);\r\n                const allConnectedClients = JSON.parse(\r\n                    JSON.stringify(clientsRef.current)\r\n                );\r\n                if (clientIdx > -1) {\r\n                    allConnectedClients[clientIdx].muted = mute;\r\n                    setClients(allConnectedClients);\r\n                }\r\n            }\r\n        };\r\n\r\n        initChat();\r\n        return () => {\r\n            if(localMediaStream.current) {\r\n                localMediaStream.current.getTracks().forEach((track) => {\r\n                  track.stop();\r\n                });\r\n                socket.current.emit(ACTIONS.LEAVE, { roomId });\r\n              }        \r\n            for (let peerId in connections.current) {\r\n                connections.current[peerId].close();\r\n                delete connections.current[peerId];\r\n                delete audioElements.current[peerId];\r\n            }\r\n            socket.current.off(ACTIONS.ADD_PEER);\r\n            socket.current.off(ACTIONS.REMOVE_PEER);\r\n            socket.current.off(ACTIONS.ICE_CANDIDATE);\r\n            socket.current.off(ACTIONS.SESSION_DESCRIPTION);\r\n            socket.current.off(ACTIONS.MUTE);\r\n            socket.current.off(ACTIONS.UNMUTE);\r\n        };\r\n    }, []);\r\n\r\n    const provideRef = (instance, userId) => {\r\n        audioElements.current[userId] = instance;\r\n    };\r\n\r\n    const handleMute = (isMute, userId) => {\r\n        let settled = false;\r\n\r\n        if (userId === user.id) {\r\n            let interval = setInterval(() => {\r\n                if (localMediaStream.current) {\r\n                    localMediaStream.current.getTracks()[0].enabled = !isMute;\r\n                    if (isMute) {\r\n                        socket.current.emit(ACTIONS.MUTE, {\r\n                            roomId,\r\n                            userId: user.id,\r\n                        });\r\n                    } else {\r\n                        socket.current.emit(ACTIONS.UNMUTE, {\r\n                            roomId,\r\n                            userId: user.id,\r\n                        });\r\n                    }\r\n                    settled = true;\r\n                }\r\n                if (settled) {\r\n                    clearInterval(interval);\r\n                }\r\n            }, 200);\r\n        }\r\n    };\r\n\r\n    return {\r\n        clients,\r\n        provideRef,\r\n        handleMute,\r\n    };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}