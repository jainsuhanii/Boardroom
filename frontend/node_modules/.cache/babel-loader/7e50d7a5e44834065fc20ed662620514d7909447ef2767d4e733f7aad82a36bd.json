{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef, useEffect, useCallback } from 'react';\nimport { useStateWithCallback } from './useStateWithCallback';\nimport { socketInit } from '../socket/index';\nimport { ACTIONS } from '../actions';\nimport freeice from 'freeice';\nexport const useWebRTC = (roomId, user) => {\n  _s();\n  const [clients, setClients] = useStateWithCallback([]);\n  const audioElements = useRef({});\n  const connections = useRef({});\n  const localMediaStream = useRef(null);\n  const clientsRef = useRef(null);\n  const socket = useRef(null);\n  useEffect(() => {\n    socket.current = socketInit();\n  }, []);\n  const addNewClient = useCallback((newClient, cb) => {\n    const lookingFor = clients.find(client => client.id === newClient.id);\n    if (lookingFor === undefined) {\n      setClients(existingClients => [...existingClients, newClient], cb);\n    }\n  }, [clients, setClients]);\n\n  //capture media\n  useEffect(() => {\n    const startCapture = async () => {\n      localMediaStream.current = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n    };\n    startCapture().then(stream => {\n      addNewClient(user, () => {\n        const localElement = audioElements.current[user.id];\n        if (localElement) {\n          localElement.volume = 0;\n          localElement.srcObject = localMediaStream.current;\n        }\n\n        // socket emit JOIN socket.io\n        socket.current.emit(ACTIONS.JOIN, {});\n      });\n    });\n  }, [addNewClient, user]);\n  useEffect(() => {\n    const handleNewPeer = async ({\n      peerId,\n      createOffer,\n      user: remoteUser\n    }) => {\n      //if already connected give warning\n      if (peerId in connections.current) {\n        return console.warn(`You are already connected with ${peerId} (${user.name})`);\n      }\n      connections.current[peerId] = new RTCPeerConnection({\n        iceServers: freeice()\n      });\n\n      //Handle new ice candidate\n      connections.current[peerId].onicecandidate = event => {\n        socket.current.emit(ACTIONS.RELAY_ICE, {\n          peerId,\n          icecandidate: event.candidate\n        });\n      };\n\n      // Handle on track on this connection\n      connections.current[peerId].ontrack = ({\n        streams: [remoteStream]\n      }) => {\n        addNewClient(remoteUser, () => {\n          if (audioElements.current[user.id]) {\n            audioElements.current[remoteUser.id].srcObject = remoteStream;\n          } else {\n            let settled = false;\n            const interval = setInterval(() => {\n              if (audioElements.current[user.id]) {\n                audioElements.current[remoteUser.id].srcObject = remoteStream;\n                settled = true;\n              }\n              if (settled) {\n                clearInterval(interval);\n              }\n            }, 1000);\n          }\n        });\n      };\n\n      //Add local track to remote connections\n      localMediaStream.current.getTracks().forEach(track => {\n        connections.current[peerId].addTrack(track, localMediaStream.current);\n      });\n      //create offer\n      if (createOffer) {\n        const offer = await connections.current[peerId].createOffer();\n\n        // Set as local description\n        await connections.current[peerId].setLocalDescription(offer);\n\n        // send offer to the server\n        socket.current.emit(ACTIONS.RELAY_SDP, {\n          peerId,\n          sessionDescription: offer\n        });\n      }\n    };\n    async function handleRemovePeer({\n      peerId,\n      userId\n    }) {\n      // Correction: peerID to peerId\n      if (connections.current[peerId]) {\n        connections.current[peerId].close();\n      }\n      delete connections.current[peerId];\n      delete audioElements.current[peerId];\n      setClients(list => list.filter(c => c.id !== userId));\n    }\n    async function handleIceCandidate({\n      peerId,\n      icecandidate\n    }) {\n      if (icecandidate) {\n        connections.current[peerId].addIceCandidate(icecandidate);\n      }\n    }\n    async function setRemoteMedia({\n      peerId,\n      sessionDescription: remoteSessionDescription\n    }) {\n      connections.current[peerId].setRemoteDescription(new RTCSessionDescription(remoteSessionDescription));\n\n      // If session descrition is offer then create an answer\n      if (remoteSessionDescription.type === 'offer') {\n        const connection = connections.current[peerId];\n        const answer = await connection.createAnswer();\n        connection.setLocalDescription(answer);\n        socket.current.emit(ACTIONS.RELAY_SDP, {\n          peerId,\n          sessionDescription: answer\n        });\n      }\n    }\n    async function handleSetMute(mute, userId) {\n      const clientIdx = clientsRef.current.map(client => client.id).indexOf(userId);\n      const allConnectedClients = JSON.parse(JSON.stringify(clientsRef.current));\n      if (clientIdx > -1) {\n        allConnectedClients[clientIdx].muted = mute;\n        setClients(allConnectedClients);\n      }\n    }\n    initChat();\n    return () => {\n      localMediaStream.current.getTracks().forEach(track => track.stop());\n      socket.current.emit(ACTIONS.LEAVE, {\n        roomId\n      });\n      for (let peerId in connections.current) {\n        connections.current[peerId].close();\n        delete connections.current[peerId];\n        delete audioElements.current[peerId];\n      }\n      socket.current.off(ACTIONS.ADD_PEER);\n      socket.current.off(ACTIONS.REMOVE_PEER);\n      socket.current.off(ACTIONS.ICE_CANDIDATE);\n      socket.current.off(ACTIONS.SESSION_DESCRIPTION);\n      socket.current.off(ACTIONS.MUTE);\n      socket.current.off(ACTIONS.UNMUTE);\n    };\n  }, []);\n  const provideRef = (instance, userId) => {\n    audioElements.current[userId] = instance;\n  };\n  const handleMute = (isMute, userId) => {\n    let settled = false;\n    if (userId === user.id) {\n      let interval = setInterval(() => {\n        if (localMediaStream.current) {\n          localMediaStream.current.getTracks()[0].enabled = !isMute;\n          if (isMute) {\n            socket.current.emit(ACTIONS.MUTE, {\n              roomId,\n              userId: user.id\n            });\n          } else {\n            socket.current.emit(ACTIONS.UNMUTE, {\n              roomId,\n              userId: user.id\n            });\n          }\n          settled = true;\n        }\n        if (settled) {\n          clearInterval(interval);\n        }\n      }, 200);\n    }\n  };\n  return {\n    clients,\n    provideRef,\n    handleMute\n  };\n};\n_s(useWebRTC, \"lK7E40/uEEOTkO8ngdm8nQZLH+k=\", false, function () {\n  return [useStateWithCallback];\n});","map":{"version":3,"names":["useState","useRef","useEffect","useCallback","useStateWithCallback","socketInit","ACTIONS","freeice","useWebRTC","roomId","user","_s","clients","setClients","audioElements","connections","localMediaStream","clientsRef","socket","current","addNewClient","newClient","cb","lookingFor","find","client","id","undefined","existingClients","startCapture","navigator","mediaDevices","getUserMedia","audio","then","stream","localElement","volume","srcObject","emit","JOIN","handleNewPeer","peerId","createOffer","remoteUser","console","warn","name","RTCPeerConnection","iceServers","onicecandidate","event","RELAY_ICE","icecandidate","candidate","ontrack","streams","remoteStream","settled","interval","setInterval","clearInterval","getTracks","forEach","track","addTrack","offer","setLocalDescription","RELAY_SDP","sessionDescription","handleRemovePeer","userId","close","list","filter","c","handleIceCandidate","addIceCandidate","setRemoteMedia","remoteSessionDescription","setRemoteDescription","RTCSessionDescription","type","connection","answer","createAnswer","handleSetMute","mute","clientIdx","map","indexOf","allConnectedClients","JSON","parse","stringify","muted","initChat","stop","LEAVE","off","ADD_PEER","REMOVE_PEER","ICE_CANDIDATE","SESSION_DESCRIPTION","MUTE","UNMUTE","provideRef","instance","handleMute","isMute","enabled"],"sources":["C:/Users/Admin/Desktop/boardroom/frontend/src/hooks/useWebRTC.js"],"sourcesContent":["import { useState, useRef, useEffect, useCallback } from 'react';\r\nimport { useStateWithCallback } from './useStateWithCallback';\r\nimport {socketInit} from '../socket/index';\r\nimport { ACTIONS } from '../actions';\r\nimport freeice from 'freeice';\r\n\r\nexport const useWebRTC = (roomId, user) => {\r\n    const [clients, setClients]= useStateWithCallback([]);\r\n    const audioElements = useRef({});\r\n    const connections = useRef({});\r\n    const localMediaStream = useRef(null);\r\n    const clientsRef = useRef(null);\r\n    const socket = useRef(null);\r\n    \r\n    useEffect(() =>{\r\n        socket.current = socketInit();\r\n    },[])\r\n\r\n    const addNewClient = useCallback(\r\n        (newClient, cb) => {\r\n            const lookingFor = clients.find((client) => client.id === newClient.id);\r\n            if (lookingFor === undefined){\r\n                setClients((existingClients) => [...existingClients, newClient], \r\n                cb\r\n            );}\r\n\r\n        },\r\n        [clients, setClients]\r\n    );\r\n\r\n    \r\n\r\n    //capture media\r\n    useEffect(() => {   \r\n        const startCapture = async() => {\r\n            localMediaStream.current = \r\n            await navigator.mediaDevices.getUserMedia({\r\n                audio: true\r\n            });\r\n        };\r\n        startCapture().then((stream) => {\r\n            addNewClient(user, ()=>{\r\n                const localElement = audioElements.current[user.id];\r\n                if (localElement){\r\n                    localElement.volume = 0;\r\n                    localElement.srcObject = localMediaStream.current;\r\n                }\r\n\r\n                // socket emit JOIN socket.io\r\n                socket.current.emit(ACTIONS.JOIN, {});\r\n\r\n            })\r\n        })\r\n    }, [addNewClient, user]);\r\n\r\n    useEffect(() => {\r\n        const handleNewPeer = async ({peerId, createOffer, user:remoteUser}) => {\r\n            //if already connected give warning\r\n            if (peerId in connections.current){\r\n                return console.warn(`You are already connected with ${peerId} (${user.name})`);\r\n            }\r\n    \r\n            connections.current[peerId] = new RTCPeerConnection({\r\n                iceServers: freeice()\r\n            });\r\n    \r\n            //Handle new ice candidate\r\n            connections.current[peerId].onicecandidate = (event) => {\r\n                socket.current.emit(ACTIONS.RELAY_ICE,{\r\n                    peerId,\r\n                    icecandidate: event.candidate\r\n                });\r\n            }\r\n    \r\n            // Handle on track on this connection\r\n            connections.current[peerId].ontrack = ({\r\n                streams: [remoteStream]\r\n            }) => {\r\n                addNewClient(remoteUser, ()=>{\r\n                    if (audioElements.current[user.id]){\r\n                        audioElements.current[remoteUser.id].srcObject= remoteStream;\r\n                    } else {\r\n                        let settled = false;\r\n                        const interval = setInterval(()=>{\r\n                            if (audioElements.current[user.id]){\r\n                                audioElements.current[remoteUser.id].srcObject= remoteStream;\r\n                                settled = true;\r\n                            }\r\n                            if (settled) {\r\n                                clearInterval(interval);\r\n                            }\r\n    \r\n                        }, 1000)\r\n                    }\r\n                });\r\n            }\r\n                \r\n                    //Add local track to remote connections\r\n                    localMediaStream.current.getTracks().forEach(track => {\r\n                        connections.current[peerId].addTrack(\r\n                            track,\r\n                            localMediaStream.current\r\n                        );\r\n                    });\r\n                    //create offer\r\n                    if (createOffer) {\r\n                        const offer = await connections.current[\r\n                            peerId\r\n                        ].createOffer();\r\n    \r\n                        // Set as local description\r\n                        await connections.current[peerId].setLocalDescription(\r\n                            offer\r\n                        );\r\n    \r\n                        // send offer to the server\r\n                        socket.current.emit(ACTIONS.RELAY_SDP, {\r\n                            peerId,\r\n                            sessionDescription: offer,\r\n                        });\r\n                    }\r\n                }\r\n            async function handleRemovePeer({ peerId, userId }) {\r\n                // Correction: peerID to peerId\r\n                if (connections.current[peerId]) {\r\n                    connections.current[peerId].close();\r\n                }\r\n\r\n                delete connections.current[peerId];\r\n                delete audioElements.current[peerId];\r\n                setClients((list) => list.filter((c) => c.id !== userId));\r\n            \r\n            }\r\n            async function handleIceCandidate({ peerId, icecandidate }) {\r\n                if (icecandidate) {\r\n                    connections.current[peerId].addIceCandidate(icecandidate);\r\n                }\r\n            }\r\n            async function setRemoteMedia({\r\n                peerId,\r\n                sessionDescription: remoteSessionDescription,\r\n            }) {\r\n                connections.current[peerId].setRemoteDescription(\r\n                    new RTCSessionDescription(remoteSessionDescription)\r\n                );\r\n\r\n                // If session descrition is offer then create an answer\r\n                if (remoteSessionDescription.type === 'offer') {\r\n                    const connection = connections.current[peerId];\r\n\r\n                    const answer = await connection.createAnswer();\r\n                    connection.setLocalDescription(answer);\r\n\r\n                    socket.current.emit(ACTIONS.RELAY_SDP, {\r\n                        peerId,\r\n                        sessionDescription: answer,\r\n                    });\r\n                }\r\n            }\r\n            async function handleSetMute(mute, userId) {\r\n                const clientIdx = clientsRef.current\r\n                    .map((client) => client.id)\r\n                    .indexOf(userId);\r\n                const allConnectedClients = JSON.parse(\r\n                    JSON.stringify(clientsRef.current)\r\n                );\r\n                if (clientIdx > -1) {\r\n                    allConnectedClients[clientIdx].muted = mute;\r\n                    setClients(allConnectedClients);\r\n                }\r\n            }\r\n      \r\n\r\n        initChat();\r\n        return () => {\r\n            localMediaStream.current\r\n                .getTracks()\r\n                .forEach((track) => track.stop());\r\n            socket.current.emit(ACTIONS.LEAVE, { roomId });\r\n            for (let peerId in connections.current) {\r\n                connections.current[peerId].close();\r\n                delete connections.current[peerId];\r\n                delete audioElements.current[peerId];\r\n            }\r\n            socket.current.off(ACTIONS.ADD_PEER);\r\n            socket.current.off(ACTIONS.REMOVE_PEER);\r\n            socket.current.off(ACTIONS.ICE_CANDIDATE);\r\n            socket.current.off(ACTIONS.SESSION_DESCRIPTION);\r\n            socket.current.off(ACTIONS.MUTE);\r\n            socket.current.off(ACTIONS.UNMUTE);\r\n        };\r\n    }, []);\r\n\r\n    const provideRef = (instance, userId) => {\r\n        audioElements.current[userId] = instance;\r\n    };\r\n\r\n    const handleMute = (isMute, userId) => {\r\n        let settled = false;\r\n\r\n        if (userId === user.id) {\r\n            let interval = setInterval(() => {\r\n                if (localMediaStream.current) {\r\n                    localMediaStream.current.getTracks()[0].enabled = !isMute;\r\n                    if (isMute) {\r\n                        socket.current.emit(ACTIONS.MUTE, {\r\n                            roomId,\r\n                            userId: user.id,\r\n                        });\r\n                    } else {\r\n                        socket.current.emit(ACTIONS.UNMUTE, {\r\n                            roomId,\r\n                            userId: user.id,\r\n                        });\r\n                    }\r\n                    settled = true;\r\n                }\r\n                if (settled) {\r\n                    clearInterval(interval);\r\n                }\r\n            }, 200);\r\n        }\r\n    };\r\n\r\n    return {\r\n        clients,\r\n        provideRef,\r\n        handleMute,\r\n    };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}